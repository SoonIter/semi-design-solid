{"version":3,"file":"Button.162c9648.js","sources":["../../../semi-foundation/button/constants.ts","../../../semi-foundation/utils/function.ts","../../button/context.ts","../../button/Button.tsx"],"sourcesContent":["import { BASE_CLASS_PREFIX } from '../base/constants';\n\nconst cssClasses = {\n    PREFIX: `${BASE_CLASS_PREFIX}-button`,\n};\n\nconst strings = {\n    sizes: ['default', 'small', 'large'],\n    iconPositions: ['left', 'right'],\n    htmlTypes: ['button', 'reset', 'submit'],\n    btnTypes: ['primary', 'secondary', 'tertiary', 'warning', 'danger'],\n    themes: ['solid', 'borderless', 'light'],\n    DEFAULT_ICON_SIZE: 'default',\n    DEFAULT_ICON_POSITION: 'left',\n} as const;\n\nconst numbers = {};\n\nexport { cssClasses, strings, numbers };\n","/**\n * no operation\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n","import { Size, Theme, Type } from './Button';\n\nexport const ButtonGroupContext = createContext<\n{ size?: Size; disabled?: boolean; type?: Type; theme?: Theme }\n>({});\n","import { cssClasses } from '@douyinfe/semi-foundation/button/constants';\nimport { noop } from '@douyinfe/semi-foundation/utils/function';\nimport '@douyinfe/semi-foundation/button/button.scss';\nimport { JSX } from 'solid-js';\nimport { ButtonGroupContext } from './context';\nimport { useContext } from 'solid-js';\n\nexport type HtmlType = 'button' | 'reset' | 'submit';\nexport type Size = 'default' | 'small' | 'large';\nexport type Theme = 'solid' | 'borderless' | 'light';\nexport type Type = 'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger';\n\nexport interface ButtonProps extends JSX.HTMLAttributes<HTMLButtonElement> {\n  'id'?: string;\n  'block'?: boolean;\n  'circle'?: boolean;\n  'children'?: JSX.Element;\n  'disabled'?: boolean;\n  'className'?: string;\n  'icon'?: JSX.Element;\n  'iconPosition'?: 'left' | 'right';\n  'loading'?: boolean;\n  'htmlType'?: HtmlType;\n  'size'?: Size;\n  'theme'?: Theme;\n  'type'?: Type;\n  'prefixCls'?: string;\n  'onClick'?: JSX.HTMLAttributes<HTMLButtonElement>['onClick'];\n  'onMouseDown'?: JSX.HTMLAttributes<HTMLButtonElement>['onMouseDown'];\n  'onMouseEnter'?: JSX.HTMLAttributes<HTMLButtonElement>['onMouseEnter'];\n  'onMouseLeave'?: JSX.HTMLAttributes<HTMLButtonElement>['onMouseLeave'];\n  'aria-label'?: JSX.HTMLAttributes<HTMLButtonElement>['aria-label'];\n}\n\nconst Button: Component<ButtonProps> = (props) => {\n  const ButtonGroupProps = useContext(ButtonGroupContext);\n  const allProps = mergeProps(\n    {\n      children: [],\n      circle: false,\n      disabled: false,\n      size: 'default',\n      type: 'primary' as Type,\n      theme: 'light' as Theme,\n      block: false,\n      htmlType: 'button' as HtmlType,\n      onMouseDown: noop,\n      onClick: noop,\n      onMouseEnter: noop,\n      onMouseLeave: noop,\n      prefixCls: cssClasses.PREFIX,\n    },\n    ButtonGroupProps,\n    props,\n  );\n  const buttonElementProps = createMemo(() => {\n    const { prefixCls, type, size, theme, block, circle, htmlType, disabled, ...attr } = allProps;\n    return {\n      disabled,\n      ...attr,\n      'classList': {\n        [prefixCls]: !!prefixCls,\n        [`${prefixCls}-${type}`]: !disabled && !!type,\n        [`${prefixCls}-disabled`]: disabled,\n        [`${prefixCls}-size-large`]: size === 'large',\n        [`${prefixCls}-size-small`]: size === 'small',\n        [`${prefixCls}-light`]: theme === 'light',\n        [`${prefixCls}-block`]: block,\n        [`${prefixCls}-circle`]: circle,\n        [`${prefixCls}-borderless`]: theme === 'borderless',\n      },\n      'aria-disabled': disabled,\n      'type': htmlType,\n    };\n  });\n\n  return (\n    <button\n      {...buttonElementProps()}\n      onClick={allProps.onClick}\n      onMouseDown={allProps.onMouseDown}\n      onMouseLeave={allProps.onMouseLeave}\n    >\n      <span class={`${allProps.prefixCls}-content`} onClick={(e) => allProps.disabled && e.stopPropagation()}>\n        {props.children}\n      </span>\n    </button>\n  );\n};\n\nexport default Button;\n"],"names":["cssClasses","PREFIX","BASE_CLASS_PREFIX","strings","sizes","iconPositions","htmlTypes","btnTypes","themes","DEFAULT_ICON_SIZE","DEFAULT_ICON_POSITION","noop","ButtonGroupContext","createContext","Button","props","ButtonGroupProps","useContext","children","circle","disabled","size","type","theme","block","htmlType","onMouseDown","onClick","onMouseEnter","onMouseLeave","buttonElementProps","createMemo","allProps","attr","prefixCls","_el$","_tmpl$","_el$2","_$insert","_$effect"],"mappings":"kJAEA,MAAMA,EAAa,CACfC,OAAS,GAAEC,UADI,EAIbC,EAAU,CACZC,MAAO,CAAC,UAAW,QAAS,OAArB,EACPC,cAAe,CAAC,OAAQ,OAAT,EACfC,UAAW,CAAC,SAAU,QAAS,QAApB,EACXC,SAAU,CAAC,UAAW,YAAa,WAAY,UAAW,QAAhD,EACVC,OAAQ,CAAC,QAAS,aAAc,OAAxB,EACRC,kBAAmB,UACnBC,sBAAuB,MAPX,ECFT,SAASC,GAAO,CAAE,CCFlB,MAAAC,EAAAC,EAAA,CAAA,CAAA,wCCgCPC,EAAAC,GAAA,CACE,MAAAC,EAAAC,EAAAL,CAAA,OAGIM,SAAAA,CAAAA,EACAC,OAAAA,GACAC,SAAAA,GACAC,KAAAA,UACAC,KAAAA,UACAC,MAAAA,QACAC,MAAAA,GACAC,SAAAA,SACAC,YAAAA,EACAC,QAAAA,EACAC,aAAAA,EACAC,aAAAA,oBAZF,EAAAb,EAAAD,CAAA,EAkBFe,EAAAC,EAAA,IAAA,oFACQ,EAAAC,oBAGJ,GAAAC,aAEE,CAAAC,GAAA,CAAA,CAAAA,wBAEA,CAAA,GAAAA,cAAAd,EACA,CAAA,GAAAc,gBAAAb,IAAA,QACA,CAAA,GAAAa,gBAAAb,IAAA,QACA,CAAA,GAAAa,WAAAX,IAAA,QACA,CAAA,GAAAW,WAAAV,EACA,CAAA,GAAAU,YAAAf,EACA,CAAA,GAAAe,gBAAAX,IAAA,cAEF,gBAAAH,SAhBiC,CAAA,EAqBrC,OAAA,IAAA,CAAA,MAAAe,EAAAC,EAAA,UAAA,EAAA,EAAAC,EAAAF,EAAA,4HAAAE,EAAAA,QAAAA,GAAAA,EAAAA,UAAAA,EAAAA,kBAAAC,EAAAA,EAAAA,IAAAA,EAAAA,QAAAA,EAAAC,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,mBAAAA,CAAAA,EAAAJ,CAAA,IA1CF"}